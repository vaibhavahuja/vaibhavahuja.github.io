<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vaibhav Ahuja</title>
    <description>my personal space where i write about stuff that excites me.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 29 Nov 2023 22:31:09 +0530</pubDate>
    <lastBuildDate>Wed, 29 Nov 2023 22:31:09 +0530</lastBuildDate>
    <generator>Jekyll v3.9.3</generator>
    
      <item>
        <title>How I secured CWC'23 tickets by exploiting flaws in BookMyShow</title>
        <description>&lt;h3 id=&quot;context&quot;&gt;Context&lt;/h3&gt;

&lt;p&gt;India is a cricket crazy country. No sport is celebrated as cricket is here. With this star studded team under the guidance of Jay Shah, we were all set to win the WC’23 but then australia happened.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/indvsaus.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With India hosting the world cup, the demand for the tickets (for India matches) was unbelieveable, the whole country wanted to support the team in the stadium, and why not? BCCI decided to give &lt;a href=&quot;https://in.bookmyshow.com/&quot;&gt;BookMyShow&lt;/a&gt; the rights to be the sole ticket distributor, and I am glad they did. Any ticket purchased for the world cup, was to be purchased on the online platform of BookMyShow. The thing is, that the seats are limited and there is no limit to the number of people who want their hands on the tickets.&lt;/p&gt;

&lt;p&gt;A quick overview of how the sale for india matches happened.&lt;/p&gt;

&lt;h4 id=&quot;sample-timeline-of-the-ticket-booking-process&quot;&gt;Sample Timeline of the ticket booking process&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;[A day before sale day]&lt;/strong&gt;
BCCI announces on Twitter/News about the sale for the ticket. (say e.g “India vs Pakistan tickets to be out on 8pm on dd/mm/yyyy on BookMyShow”)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[7:58PM]&lt;/strong&gt;
All the cricket fans, are ready with their laptops , bombarding the bookMyShow systems to book the tickets.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[8.00PM]&lt;/strong&gt; 
BookMyShow adds the fans to a queue to book the tickets&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[8.55PM]&lt;/strong&gt; 
99% fans leave the queue with a message “The tickets are SOLD OUT!”
If lucky, and you get in the queue, you are free to book the tickets.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;issues&quot;&gt;Issues&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;No transparency with the system. No one has idea about how many tickets are being released on DAY x.&lt;/li&gt;
  &lt;li&gt;With almost everyone trying to get in the system at 8.00PM, who is able to pass the queue and who is not, depends highly on the luck of the individual.&lt;/li&gt;
  &lt;li&gt;My luck isn’t that great, so when I tried to get in the queue for Ind VS Pak for the first time, all the tickets were sold out, and I could not get the tickets.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although I was unable to get the tickets, I somehow managed to get my hands on the API which has seat information, and I was shocked to see how little tickets BMS is releasing. Now agreed, BMS is just a platform and the ticket seller can control, but transparency is something a buyer would expect. They just released 8-9k seats in a stadium with total capacity of 132k.
There was very little chances that I could get the tickets this way, so I tried to think in other directions.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/BookMyShowScam?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#BookMyShowScam&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/Bookmyshow?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#Bookmyshow&lt;/a&gt; &lt;a href=&quot;https://twitter.com/ICC?ref_src=twsrc%5Etfw&quot;&gt;@ICC&lt;/a&gt; &lt;a href=&quot;https://twitter.com/BCCI?ref_src=twsrc%5Etfw&quot;&gt;@BCCI&lt;/a&gt; &lt;br /&gt;what is this? &lt;a href=&quot;https://twitter.com/bookmyshow?ref_src=twsrc%5Etfw&quot;&gt;@bookmyshow&lt;/a&gt; &lt;a href=&quot;https://twitter.com/narendramodi?ref_src=twsrc%5Etfw&quot;&gt;@narendramodi&lt;/a&gt; stadium has a total capacity of 132k &lt;br /&gt;&lt;br /&gt;number of seats you put on sale &amp;lt; 10k for which millions of people are trying&lt;br /&gt;&lt;br /&gt;are all the other seats reserver for corporates? what about the tax payer? &lt;a href=&quot;https://t.co/6KYanGrDQx&quot;&gt;pic.twitter.com/6KYanGrDQx&lt;/a&gt;&lt;/p&gt;&amp;mdash; Vaibhav Ahuja (@vaibhav_ahuja7) &lt;a href=&quot;https://twitter.com/vaibhav_ahuja7/status/1698348472377000291?ref_src=twsrc%5Etfw&quot;&gt;September 3, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;!-- ![CWC Tweet](../images/cwcTweet.png) --&gt;

&lt;h3 id=&quot;my-thought-process&quot;&gt;My Thought process&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;BookMyShow has a queue based system, and they add people in the queue on the basis of time they enter the queue.&lt;/li&gt;
  &lt;li&gt;At exactly 8, system is bombarded with requests. System must be experiencing atleast 15-20M RPM, and pre scaling must be done. What is pre scaling? &lt;em&gt;Before experiencing high loads, systems are already scaled, so it does not take time for scaling when the demand increases and requests are not throttled.&lt;/em&gt; Also the API must be public before 8. They cannot keep the API private until 8.&lt;/li&gt;
  &lt;li&gt;The queue system must have an API exposed, something like this, which is already scaled :&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;addToQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;details&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MatchDetails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//adds the user to queue at time [currentTime] for match [details]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Since the system is exposed 5-10 minutes before the time, all we needed to do, was figure out a way how to hit the API before 8pm, to get an edge over the other people trying to get inside the queue at 8.00PM.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;figuring-out-the-queue-url&quot;&gt;Figuring out the Queue URL&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;After a few unsuccessful attempts in booking the tickets, I figured out that every queue URL (from where you enter the queue) has a well defined pattern.
    &lt;h5 id=&quot;pattern-for-the-url&quot;&gt;Pattern for the URL&lt;/h5&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While going through the URLs for the past matches, I saw the URL looked like this.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{baseUrl}/sports/&amp;lt;match_name&amp;gt;/seat-layout/aerialcanvas/&amp;lt;matchId&amp;gt;/&amp;lt;stadiumCode&amp;gt;/&amp;lt;matchCode&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Basically, for entering in a queue, we just needed the above parameters.&lt;/li&gt;
  &lt;li&gt;It was easy to figure out the other parameters, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;matchCode&lt;/code&gt; was a random 6 digit numeric code.&lt;/li&gt;
  &lt;li&gt;I saw a few matches and realised that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;matchCode&lt;/code&gt; is between 10000 and 10200, so a simple brute force would help in cracking the URL. I quickly wrote a shell script to brute force the urls and return the one which we need. Here is the script :&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&quot;https://gist.github.com/vaibhavahuja/1fd19d1ff8fefbacb48c6d4b3fc9fcfe.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;That is it, with this script I managed to get the urls for every match before hand, and used it to get in the queue at 7:55PM. This gave me an edge of around 5 minutes, over anyone else. Since the majority logged in at 8, I was put in queue ahead of them, and was able to book the tickets without any hassle.&lt;/p&gt;

&lt;h3 id=&quot;fetching-the-real-time-seat-information&quot;&gt;Fetching the Real Time Seat Information&lt;/h3&gt;

&lt;p&gt;I was able to scrape the API for fetching the tickets, and I saw a lot of tweets regarding the same, cursing BMS for releasing a small number of tickets. Seems, bookMyShow decided to encrypt the response now. But, it was easy to decrypt, because maybe the bms devs did not realise that the client would in the end have to decrypt the response. It really did not make any sense to send an encrypted response to the client.&lt;/p&gt;

&lt;p&gt;Sample cURL for fetching seat info&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl 'https://in.bookmyshow.com/api/le/seatLayout/showinfo?venueCode=KSCA&amp;amp;sessionID=10057&amp;amp;eventCode=ET00367591' \
  -H 'user-agent: Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Mobile Safari/537.36' \
  -H 'x-bms-le-app-code: WEB' \
  --compressed&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Response -&amp;gt; &lt;a href=&quot;https://jsonblob.com/1179043777594908672&quot;&gt;JSON BLOB RESPONSE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since this data was encrypted, I started fiddling with the client code to figure out how they decrypted it and came across this method.
&lt;a href=&quot;https://gist.github.com/vaibhavahuja/02648eb7fb30d33478929971591d21e9&quot;&gt;Here&lt;/a&gt; is the full file if anyone is interested.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Utf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;yW8YubOEm5DhPlvy0MDOM0RljolbjisR&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Utf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;yW8YubOEm5DhPlvy&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;ciphertext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CBC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Utf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;They had encrypted the response using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AES&lt;/code&gt;, with Cipher Mode as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CBC&lt;/code&gt; and the key size as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;256 bits&lt;/code&gt;. It really does not make sense to decrypt at client!!&lt;/p&gt;

&lt;p&gt;Decrypted the response with some &lt;a href=&quot;https://www.devglan.com/online-tools/aes-encryption-decryption&quot;&gt;online decryption tool&lt;/a&gt; and got a base64 encoded response, which on decoding, you get the actual response.&lt;/p&gt;

&lt;p&gt;Response attached &lt;a href=&quot;http://jsonblob.com/1179045408126394368&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;BMS should have enhanced the security tbh. By generating a new url per user (using some hmac or something) things would have been extremely hard for anyone to get inside the queue before the designated time. Or even better, BCCI could have started some lucky draw process to get the tickets.&lt;/li&gt;
  &lt;li&gt;BCCI should have been more transparent. CWC tickets should be released with a defined process, and transparency on how many tickets are being released and when, would have been amazing.&lt;/li&gt;
  &lt;li&gt;E-Tickets would have been amazing. The way ticketing was organised in fifa’22 was something else.&lt;/li&gt;
  &lt;li&gt;India shouldn’t have taken Surya Kumar Yadav with them. He did not perform in a single match, and when the team needed him the most (in the finals), he gave strike to the tailenders and preferred to stand on the runners end. Just terrible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../images/jayShahCricket.jpeg&quot; alt=&quot;JayShah&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Jan 2022 16:51:29 +0530</pubDate>
        <link>http://localhost:4000/how-i-got-every-wc-ticket</link>
        <guid isPermaLink="true">http://localhost:4000/how-i-got-every-wc-ticket</guid>
        
        <category>strategy</category>
        
        
      </item>
    
      <item>
        <title>Discipline. Perseverence. Eliud.</title>
        <description>&lt;p&gt;I have always been a big fan of Eliud Kipchoge. He is the goat 🐐 when it comes to long distance running. I followed his journey of running a marathon under 2 hours, by Nike, and just the guts of him attempting something like that is crazy. Pushing human limits to an extent which is hard to imagine, is just commendable. In his intro video, the orator described him as a chess grandmaster, so calm and so composed, you can never tell what is going on in his head. He is a top notch world class athlete, a multi millionaire, one of the most accomplished long distance runner. However, a look in his camp shows how humble he is.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/eliud.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“I believe in a calm, simple, low profile life”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is what Eliud has to say&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“You live simple, you train hard, you live an honest life then you are free”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This man, Eliud talks about discipline.
According to Eliud, there are few factors to be successful.
One is Self-Discipline
Second is very well prepraration
Third is you should be well organised
Fourth is you should think positive
Fifth is actually working with people&lt;/p&gt;

&lt;p&gt;Starting with self-discipline,self-discipline starts with you. start to examine yourself.
So self-discipline means is doing what’s right rather than doing what you feel like doing.&lt;/p&gt;

&lt;p&gt;It can save your feelings, get you on par on the course when you try to think otherwise.&lt;/p&gt;

&lt;p&gt;Then when you are self-disciplined you can easily come back and think positively it tells you to actually do the right thing in the moment for long-term benefits.&lt;/p&gt;

&lt;p&gt;How can you cultivate this self discipline?&lt;/p&gt;

&lt;p&gt;One is that you should stick to your priorities.&lt;/p&gt;

&lt;p&gt;Second is that don’t make excuses. when you have decided to do something, do it.&lt;/p&gt;

&lt;p&gt;Thirdly, learn to say no.&lt;/p&gt;

&lt;p&gt;Fourth, is that you make discipline your lifestyle.&lt;/p&gt;

&lt;p&gt;Discipline is like building the muscle
It’s like going to the gym, you cannot go to the gym today and build your muscle.
You should get a program and go slowly by slowly that’s the way to build your muscle.&lt;/p&gt;

&lt;p&gt;That’s the way you can cultivate your self discipline.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Only the disciplined ones are free in life, if you are indisciplined you are a slave to your moods you are a slave to your passions&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The best time to plan a tree was 25 years ago, that was the best time to plant the tree. today is the best time for you to plan a tree of self-discipline&lt;/p&gt;

&lt;p&gt;Eliud is a leader to be honest. I feel I have a lot to learn, and just being disciplined can help me greatly in life. Hoping to revisit this post soon.&lt;/p&gt;

&lt;p&gt;Eliud did run a sub 2 marathon btw, he ran 26.2 miles in 1 hour, 59 minutes, and 40 seconds. commendable. 👏🏼💨&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Jan 2022 16:51:29 +0530</pubDate>
        <link>http://localhost:4000/eliud-about-discipline</link>
        <guid isPermaLink="true">http://localhost:4000/eliud-about-discipline</guid>
        
        <category>motivation</category>
        
        
      </item>
    
      <item>
        <title>Restoring trust in food through Blockchain</title>
        <description>&lt;p&gt;If I go to my nearest grocery store to purchase vegetables or fruits, the only proof of it being fresh are the claims made by the seller/vendor. They even put messages over the racks which tell the consumer that every vegetable they have is free from any harmful chemicals, and are 💯% fresh. The problem I noticed with this is that these claims are almost never true, and establishing trust amongst the consumer becomes an issue. The end consumer has to rely on how fresh and juicy the fruit looks, but again all that glitters is not gold.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/foodBlockchain4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On discussion with some local farmers around Delhi-NCR, it was found that 70% of the produce that they grow, use very harmful chemicals and water being used for growing the crops literally comes from the drain. When they try exporting the produce, the produce never passes the stringent quality checks and are rejected due to very low nutritional values. That produce is dumped to the mandis and end up in our plates. Due to such malpractices of using harmful fertilisers and poor quality water in growing the crops, the farmers are able to fill the plates of the consumer, but at what cost? &lt;em&gt;Just to mention&lt;/em&gt;, the crops that they grow for their personal use is actually very different in terms of nutritional value from the ones they dump in the market. Some farmers even have some part of their land reserved for crops to be consumed by their family.&lt;/p&gt;

&lt;p&gt;Removing all the malpractices in the food supply chain is something that is not really achievable, but what is achievable is to provide the end consumer &lt;em&gt;transparency&lt;/em&gt;. Allowing them to trace where their food comes from, and what all goes into their plates. By making the consumer more informed, they can make better decisions on what to eat and not to eat. In this post, I will be talking about how we can use blockchain to create trust amongst the consumer and the farmers, and how consumers can just trust the network and not what the vendor or the message on the racks say.&lt;/p&gt;

&lt;p&gt;Through this project, we wish to create a network through which these malpractices could be reduced. If we capture the journey of the food, from seed to plate and show it to the end consumer, it can eventually help the consumer make well informed decisions about what they wish to buy. We could have used a central database for this, which would be updated whenever the farmer does a task. But again, how would that be different from the vendor telling the consumers that the produce is 100% fresh. We needed something that is immutable. Here comes blockchain into picture. I am pretty sure you must be familiar with what blockchain is, if not you can read the underlying concepts &lt;a href=&quot;https://vaibhavahuja.github.io/blockchain/understanding-bitcoin&quot;&gt;here&lt;/a&gt;. In short, blockchain is a digital ledger of transactions which is duplicated and distributed across the entire network, thus making it immutable. This means, that once something is written on the network, no one can change it, not even us! Bitcoin and Ethereum are the two most famous and biggest blockchain networks available. Ethereum provides us with the option of developing Decentralized Applications (dapps) on the network, however they are public networks. Public network, means that anyone in this world can see all the transactions which are made on the network and all the interactions are anonymous, which is something we would not want in our network. Identifying who makes a transaction and when is a key factor of implementing the solution. Also, the process of adding new blocks to the network is through mining. Mining is a process where a large number of machines race to solve a computationally expensive mathematical problem in order to get a reward. This consensus algorithm (Proof of work) is great when there is no trust amongst the different stakeholders of the network (which is true in a public network), but in our case, the stakeholders do have some trust amongst each other, and we wish to have faster times of getting a transaction validated.&lt;/p&gt;

&lt;p&gt;Keeping the above points in picture, using Hyperledger Fabric was the best choice. Hyperledger Fabric is an open source enterprise-grade permissioned distributed ledger technology (DLT) platform. The best thing about Hyperledger is that it is open source and very well documentated.&lt;/p&gt;

&lt;p&gt;The heart of blockchain network is the ledger. The ledger is the sequenced, tamper-resistant record of all state transitions. State transitions are a result of transactions submitted by participating parties. Each transaction results in a set of asset key-value pairs that are committed to the ledger as creates, updates, or deletes. In the hyperledger fabric, the ledger comprises of a blockchain to store the immutable, sequenced record in blocks, as well as a state database to maintain current state. For capturing the journey of the food, we deal with states and transactions. There are conceptual objects of value, modeled as states, whose lifecycle transitions are described by transactions.&lt;/p&gt;

&lt;p&gt;We can represent the life cycle of our crop/produce using a state transition diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/foodBlockchain1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see how the produce object transitions between “farm”, “processingUnit”, “storage” states using the transactions as described.&lt;/p&gt;

&lt;p&gt;The structure of the food object which will be stored in the state object looks like this :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/foodBlockchain2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This state was designed keeping in picture what a transaction can update. We had set policies which allowed only a certain organisation to update a part of the state database, (i.e log transactions only which they are allowed). For example, someone who is working in logistics, won’t be able to create an &lt;em&gt;agriculture&lt;/em&gt; transaction.&lt;/p&gt;

&lt;p&gt;We aimed to capture as much as we could. The only way to capture the information was through forms, which we had provided to the farmers in their smartphones. All the farmer had to do was fill the form and click on submit, and rest was handled in the backend. The transactions get validated, and go through the transaction flow (not discussed in this post), and get logged in the blockchain network. This required some training which was given to the farmers, thus comes with an overhead cost, but helped in tracking anything that goes in the production of the crops. We tried to monitor the tiniest details related to the production of the crop, such as when was the farm irrigated, and when were the weeds removed, and which all fertilisers were used. Again, a team of agricultural experts were available making sure that the best practices were followed during the complete crop lifecycle.&lt;/p&gt;

&lt;p&gt;Making the farmers make the entries/transactions in the network was a manual and tedious task, which could be prone of errors. This required constant monitoring and checks by the team, and if the farmers log the data at the correct time and date. Human effort could have been minimized by the use of IoT devices which capture information about the soil and irrigation, or maybe some camera and a Machine Learning model, which track the produce and store information in the blockchain network.&lt;/p&gt;

&lt;p&gt;We captured information to the last mile, in the blockchain network, thus making everything real time. Tracking the produce became much easier and the quality was maintained, since the complete process was transparent.&lt;/p&gt;

&lt;p&gt;For the consumer to see the journey of their food, we had scraped information from the blockchain network and listed out in a story form which can be seen below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/foodBlockchain3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Blockchain as of now is a nascent technology, and for the adoption of this technology at large scale will take years.&lt;/p&gt;

&lt;p&gt;Hoping you liked the post. Do let me know what you think about it!&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Jun 2021 16:51:29 +0530</pubDate>
        <link>http://localhost:4000/blockchain/transparency-in-food-supply-chain</link>
        <guid isPermaLink="true">http://localhost:4000/blockchain/transparency-in-food-supply-chain</guid>
        
        <category>hyperledger</category>
        
        <category>project</category>
        
        
        <category>blockchain</category>
        
      </item>
    
      <item>
        <title>Controlling home lamp using internet</title>
        <description>&lt;p&gt;As I was browsing through Amazon, searching for things to buy which I do not need I came across this lamp which could be controlled through the internet. It was quite expensive so I thought of building my own. The way the lamp worked was that, it came with a QR code on top of it, and when scanned with the phone &lt;em&gt;(which is connected with a wi-fi)&lt;/em&gt;, the lamp gets connected and if both the devices are connected to the same wifi, we could control the lamp. That however is an issue since I wish to control my lamp from anywhere and not just from my room.&lt;/p&gt;

&lt;p&gt;I searched for options to do that for my existing table lamp, and I came across a &lt;a href=&quot;https://www.amazon.in/dp/B07V39T8F2/ref=sspa_dk_detail_2?psc=1&amp;amp;pd_rd_i=B07V39T8F2&amp;amp;pd_rd_w=ksLDx&amp;amp;pf_rd_p=30249bab-abdf-42ed-928f-d8929403a9aa&amp;amp;pd_rd_wg=3Yquo&amp;amp;pf_rd_r=QZMZ3PDK3KPPQGQ5MN3B&amp;amp;pd_rd_r=4132d55b-85f2-4e2b-b64e-dd918ec6cd21&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUEzSFRVQktEQVE0QkNaJmVuY3J5cHRlZElkPUEwOTk3NDUzNkdJWUpBV1AzOE4zJmVuY3J5cHRlZEFkSWQ9QTA2MjA4Mjc1VE4zT1U2MUgxNTImd2lkZ2V0TmFtZT1zcF9kZXRhaWwmYWN0aW9uPWNsaWNrUmVkaXJlY3QmZG9Ob3RMb2dDbGljaz10cnVl&quot;&gt;smart plug&lt;/a&gt; which could literally make any of the appliances “smart”. This would have costed around ₹2000, and I decided to create my own “smart” plug.&lt;/p&gt;

&lt;p&gt;The idea was simple, I just needed a web server where I would store the state of the switch, something that would poll my server all the time and would turn the lamp on/off according to the state. I thought of using Arduino and some wifi module, but I came across &lt;a href=&quot;https://components101.com/sites/default/files/component_datasheet/ESP8266-NodeMCU-Datasheet.pdf&quot;&gt;ESP8266-NodeMCU&lt;/a&gt;, which is again a microcontroller but it comes fitted with embedded WiFi capabilities, with the lowest costs. These chips are developed in China, and you can get one for as low as ₹200. It has an operating voltage of 3.0-3.6V and the package size was pretty small, so it could be fitted in my existing switch boards. This comes with 17 GPIO pins, and even one was enough for my POC. The GPIO pins give out the signal which can be low or high depending on the code. If I could just poll the web server, and get the state, and send out the signal through the GPIO pin, the lamp could be turned on or off. Now ofcourse, the GPIO pin would give a high signal of 3V DC, and the appliances run on 230 V AC. I used a relay for this purpose. A Relay is basically an electromechanical device that can be used to make or break an electrical connection. It consists of a flexible moving mechanical part which can be controlled electronically through an electromagnet, basically, a relay is just like a mechanical switch but you can control it with an electronic signal instead of manually turning it on or off. So it served the purpose.
I sketched out the architecture, before actually starting with the coding part of what I was about to built and it looked something like this.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;img src=&quot;/images/homeautodiag.png?raw=true&quot; alt=&quot;architecture&quot; /&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, that everything was in place, I ordered a nodeMCU ESP8266, a relay, some jumper wires, and that is it.
I used the arduino IDE itself for programming the nodeMCU. Luckily, tons of libraries exist for running nodeMCU using the arduino IDE. Parallely I created an API with two endpoints. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt; request would be used by the microcontroller to get the state of the switch, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATCH&lt;/code&gt; request, will toggle the state -&amp;gt;  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state = 1 - state&lt;/code&gt;. I had connected a free MongoDB database with just one entry, and hosted the API on a free (&lt;em&gt;making it low cost :P&lt;/em&gt;) server by Heroku. 
I also gave a neat UI which would send a patch reuest for toggling the state, and hosted it on github pages. &lt;a href=&quot;https://vaibhavahuja.github.io/homeautoui/&quot;&gt;Here is the UI&lt;/a&gt;. Tapping on the button would turn the lamp in my room on/off.&lt;/p&gt;

&lt;p&gt;Below is the code for the setup method.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;  &lt;span class=&quot;n&quot;&gt;pinMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OUTPUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;WiFi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WIFI_OFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//Prevents reconnection issue (taking too long to connect)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;WiFi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WIFI_STA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;        
  &lt;span class=&quot;n&quot;&gt;WiFi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   

  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Connecting&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Waiting for connection&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WiFi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WL_CONNECTED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//If connection successful show IP address in serial monitor&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Connected to &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IP address: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WiFi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localIP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//IP address assigned to your ESP&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that the wifi is connected and the pins are in place, coming to the loop method.&lt;/p&gt;

&lt;p&gt;The below code sends a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt; request to the server and stores the output in the line variable.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;httpsClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GET &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; HTTP/1.1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&quot;Host: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;               
               &lt;span class=&quot;s&quot;&gt;&quot;Connection: close&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;request sent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                  
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpsClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpsClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readStringUntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;headers received&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There was no need to actually use a json parser since the server would just return a single line with the status. Finally, on checking the output received, a low signal was sent to the Relay to turn on the lamp and a high signal to turn off the lamp.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpsClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()){&lt;/span&gt;        
    &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpsClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readStringUntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;digitalWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;digitalWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HIGH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/vaibhavahuja/homeAuto&quot;&gt;You can view the code for the server here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So I was able to complete this home auto project within a fraction of what I would get online.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Jan 2021 05:30:00 +0530</pubDate>
        <link>http://localhost:4000/iot/homeAutomation</link>
        <guid isPermaLink="true">http://localhost:4000/iot/homeAutomation</guid>
        
        <category>iot</category>
        
        
        <category>iot</category>
        
      </item>
    
      <item>
        <title>Effective Testing Strategy for preventing Community Spread of COVID-19</title>
        <description>&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;In India, when the country got exposed to COVID-19, we had very limited testing kits and with such a huge population, whom to test and whom not to became a serious challenge. The testing strategy followed at that time, was based on a person’s travel history, if they were showing symptoms or not and so on. The fact that a healthy asymptomatic human being can be a &lt;strong&gt;carrier for the virus&lt;/strong&gt; was ignored, and we were unable to control the Community Spread which led to a huge surge in the number of cases. The question arises on &lt;strong&gt;whom to test and whom not to when the country has limited testing available.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;proposed-solution&quot;&gt;Proposed Solution&lt;/h3&gt;

&lt;p&gt;There are no such apps which talk about effective testing, however there are a few applications which were used by the Government for Contact Tracing, like Aarogya Setu. The way aarogya setu worked was that it used the bluetooth technology in order to find the covid infected people near one person. When two people with their smartphones interact, a secure digital signature is exchanged through which it is determined if a person has contacted someone with COVID or not.
Our application defines a testing strategy for the government based on the concept of Betweenness Centrality. The shortcomings of the bluetooth based solution were that it ignored the fact that a human being with no symptoms can also be a carrier of the Virus, which we have considered. &lt;em&gt;We made a complete web application, but in this post I will only be talking about how we structured the database, and how we achieved the task. I will also be listing down the queries.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We have used Graph Databases for this task, where every person and location will be a node and all the nodes will be connected (according to their interactions). We will also be making connections between two people if they visited a place on the same day. To contain spread, we will be using the concept of articulation points and Centrality Measures. I will be talking in detail about which centrality measure will we use and why.&lt;/p&gt;

&lt;p&gt;Graph databases effectively store data relationships; they’re also flexible when expanding a data model and graph really shines in around relationship analysis, where the connections are between people. For our use case, we have used the &lt;a href=&quot;https://sandbox.neo4j.com/&quot;&gt;neo4j&lt;/a&gt; database.&lt;/p&gt;

&lt;p&gt;The initial part was to load the data into the graph databases, and initialize the nodes and define the relationships between different nodes.&lt;/p&gt;

&lt;p&gt;The first type of node was the Person node, which would define the information about a person. We made separate CSV files, and then loaded the data as follow :&lt;/p&gt;

&lt;p&gt;The information about the Person that we stored was -&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SSN&lt;/li&gt;
  &lt;li&gt;NAME&lt;/li&gt;
  &lt;li&gt;ADDRESS&lt;/li&gt;
  &lt;li&gt;SHOWING SYMPTOMS &lt;em&gt;(boolean)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;COVID INFECTED &lt;em&gt;(boolean)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; 
&lt;span class=&quot;nv&quot;&gt;&quot;https://docs.google.com/spreadsheets/d/e/2PACX-1vTdx9D4Xzrbitz5gDbd-MH7iALAZjYdOpq7Bx6pVAeVEH6_NZC_CQSWC51Tl6ODHkU0WTgSfJshzPUZ/pub?gid=0&amp;amp;single=true&amp;amp;output=csv&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;per&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;per&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;per&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;per&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symptoms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;per&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ShowingSymptoms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;per&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CovidInfected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Below is a sample node.
&lt;em&gt;We had 150 similar nodes in the database (as per the csv file we used to load)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/sampleNode.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, to create relationships between people:&lt;/p&gt;

&lt;p&gt;The below csv file just contained information about who meets who, and we create an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INTERACTS_WITH&lt;/code&gt; Relationship amongst these people.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; 
&lt;span class=&quot;nv&quot;&gt;&quot;https://docs.google.com/spreadsheets/d/e/2PACX-1vTdx9D4Xzrbitz5gDbd-MH7iALAZjYdOpq7Bx6pVAeVEH6_NZC_CQSWC51Tl6ODHkU0WTgSfJshzPUZ/pub?gid=1511060139&amp;amp;single=true&amp;amp;output=csv&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meeting&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INTERACTS_WITH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INTERACTS_WITH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are assigning a cost to every &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INTERACTS_WITH&lt;/code&gt; relationship, which in the future we might use, as we can increase the cost of relationships with already infected people :&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INTERACTS_WITH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Adding some locations to the database :&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; 
&lt;span class=&quot;nv&quot;&gt;&quot;https://docs.google.com/spreadsheets/d/e/2PACX-1vTdx9D4Xzrbitz5gDbd-MH7iALAZjYdOpq7Bx6pVAeVEH6_NZC_CQSWC51Tl6ODHkU0WTgSfJshzPUZ/pub?gid=2096582175&amp;amp;single=true&amp;amp;output=csv&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;longlat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;longlat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;City&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and making a few people go to some location on some date :&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; 
&lt;span class=&quot;nv&quot;&gt;&quot;https://docs.google.com/spreadsheets/d/e/2PACX-1vTdx9D4Xzrbitz5gDbd-MH7iALAZjYdOpq7Bx6pVAeVEH6_NZC_CQSWC51Tl6ODHkU0WTgSfJshzPUZ/pub?gid=1139166921&amp;amp;single=true&amp;amp;output=csv&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visi&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PersonSSN&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;longlat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PlaceVisitedID&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VISITS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VisitedOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have created the basic relationships and the nodes. One of the feature that we added was to auto create relatonships between two people in case two people visit the same location on the same date. 
This will be more clear in the below example :&lt;/p&gt;

&lt;p&gt;In the below figure, fibonacci visits &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mall1&lt;/code&gt; on 30th July and Daniels visits &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mall1&lt;/code&gt; on 31st July.&lt;/p&gt;

&lt;p&gt;Say, Bill visits &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mall1&lt;/code&gt; on 31st July as well, then an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INTERACTS_WITH&lt;/code&gt; relationship should be created between daniels and Bill.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/visitConn1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We do so, because there are high chances that Daniels might have interacted with Bill.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VISITS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VISITS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INTERACTS_WITH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INTERACTS_WITH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, if we visualize this graph, we can see a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INTERACTS_WITH&lt;/code&gt; relationship has been created between Daniels and Bill :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/visitConn2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After this, our graph db looks something like this :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/covidGraph.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The orange nodes signify the people, and the blue nodes signify the locations. In this dataset, a lot of locations were unvisited.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/covidGraph2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that the graph is created, with all relationships defined, we come to our solution of Centrality in order to find which People to test first and quarantine.&lt;/p&gt;

&lt;p&gt;We have used the concept of Articulation points and Centrality.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why Articulation points and Centrality?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In a graph, a vertex is called an articulation point if removing it and all the edges associated with it results in the increase of the number of connected components
Every vertex is a Human Being in our network. We wish to find those articulation points which are the most influential. (most connectivity) Here comes the concept of Betweenness Centrality.
In graph theory and network analysis, indicators of centrality identify the most important vertices within a graph. We can easily find the super spreaders of disease using this.&lt;/p&gt;

&lt;h3 id=&quot;betweenness-centrality&quot;&gt;Betweenness Centrality&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;../images/centrality.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The basic definition is : In graph theory, betweenness centrality is a measure of centrality in a graph based on shortest paths. For every pair of vertices in a connected graph, there exists at least one shortest path between the vertices such that either the number of edges that the path passes through (for unweighted graphs) or the sum of the weights of the edges (for weighted graphs) is minimized. The betweenness centrality for each vertex is the number of these shortest paths that pass through the vertex.&lt;/p&gt;

&lt;p&gt;But in simple terms, it represents the degree to which nodes stand between each other. For example, in a telecommunications network, a node with higher betweenness centrality would have more control over the network, because more information will pass through that node. It tells which node in the graph controls the flow of information in the graph.&lt;/p&gt;

&lt;p&gt;What we are doing here is, we are taking the betweenness centrality and returning the top 10 nodes (Person Nodes) whom should be tested first.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CALL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;betweenness&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;nodeProjection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Person'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	  &lt;span class=&quot;n&quot;&gt;relationshipProjection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;INTERACTS_WITH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	      &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'INTERACTS_WITH'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;orientation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'UNDIRECTED'&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;YIELD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodeId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;centrality&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodeId&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'FALSE'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;centrality&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;centrality&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above query will return the information for the first 10 people, whom we should test first.&lt;/p&gt;

&lt;p&gt;Using shortest path, we have also calculated which person to stay away from :&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;MATCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;KOAHM4127V&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;TRUE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CALL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shortestPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;nodeProjection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Person'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;relationshipProjection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;INTERACTS_WITH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'INTERACTS_WITH'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;orientation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'UNDIRECTED'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;startNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;endNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;relationshipWeightProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cost'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;YIELD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodeId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;MATCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodeId&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'TRUE'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;distinct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;asc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And, we can get the hostpots of a city :&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;MATCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;TRUE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VISITS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;We were able to manipulate the network of people and the locations in order to find the :&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Most vulnerable people (whom to test) (sorted in order of Betweenness Centrality) -
Effective Testing Strategy can be achieved using our application as it will result us with the list of Individuals along with their address which are the prime suspect and potential carriers for Communal Spread.&lt;/li&gt;
  &lt;li&gt;Most vulnerable locations (as a heatmap) - Corona Heatmap showing all the Most Infected Locations based on our Graph Data plotted on google maps which should be Sealed immediately, and our application users can ignore these Hotspot.&lt;/li&gt;
  &lt;li&gt;Whom to stay away from (calculated on basis of Dijkstras Shortest Path) (sorted in that order) - Provide List of Infected Patients nearby based on the location of logged in user.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 10 Aug 2020 05:30:00 +0530</pubDate>
        <link>http://localhost:4000/project/effectiveTestingCovid</link>
        <guid isPermaLink="true">http://localhost:4000/project/effectiveTestingCovid</guid>
        
        <category>project</category>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>Range Queries</title>
        <description>&lt;p&gt;This post is just for revising range queries. Have highlighted the topics and problems. Might write solutions (my approach) for these problems as well for future reference.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;to do : create collapsible for solutions + also to put the same in DP post&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;table-of-contents-segment-tree&quot;&gt;Table of Contents (segment tree)&lt;/h4&gt;
&lt;p&gt;Link: &lt;a href=&quot;https://cp-algorithms.com/data_structures/segment_tree.html&quot;&gt;cp-algorithms - Segment tree&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Simplest form of a Segment Tree ✔️
    &lt;ul&gt;
      &lt;li&gt;Structure of the Segment Tree ✔️&lt;/li&gt;
      &lt;li&gt;Construction ✔️&lt;/li&gt;
      &lt;li&gt;Sum queries ✔️&lt;/li&gt;
      &lt;li&gt;Update queries ✔️&lt;/li&gt;
      &lt;li&gt;Implementation ✔️&lt;/li&gt;
      &lt;li&gt;Memory efficient implementation ✔️&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Advanced versions of Segment Trees
    &lt;ul&gt;
      &lt;li&gt;More complex queries ✔️&lt;/li&gt;
      &lt;li&gt;Saving the entire subarrays in each vertex ✔️&lt;/li&gt;
      &lt;li&gt;Range updates (Lazy Propagation) ✔️&lt;/li&gt;
      &lt;li&gt;Generalization to higher dimensions 📝&lt;/li&gt;
      &lt;li&gt;Preserving the history of its values (Persistent Segment Tree)&lt;/li&gt;
      &lt;li&gt;Implicit segment tree&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;table-of-contents-fenwick-tree-or-bit&quot;&gt;Table of Contents (fenwick tree or BIT)&lt;/h4&gt;
&lt;p&gt;Link: &lt;a href=&quot;https://cp-algorithms.com/data_structures/fenwick.html&quot;&gt;cp-algorithms - Fenwick tree&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Description
    &lt;ul&gt;
      &lt;li&gt;Overview ✔️&lt;/li&gt;
      &lt;li&gt;Definition of g(i) ✔️&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Implementation
    &lt;ul&gt;
      &lt;li&gt;Finding sum in one-dimensional array ✔️&lt;/li&gt;
      &lt;li&gt;Finding minimum of [0,r] in one-dimensional array ✔️&lt;/li&gt;
      &lt;li&gt;Finding sum in two-dimensional array ✔️&lt;/li&gt;
      &lt;li&gt;One-based indexing approach ✔️&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Range operations
    &lt;ol&gt;
      &lt;li&gt;Point Update and Range Query ✔️&lt;/li&gt;
      &lt;li&gt;Range Update and Point Query 📝&lt;/li&gt;
      &lt;li&gt;Range Updates and Range Queries 📝&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;csesfi-problemset-range-queries&quot;&gt;CSES.fi problemSet (Range Queries)&lt;/h6&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://cses.fi/problemset/task/1646&quot;&gt;Range Sum Queries I ✔️&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cses.fi/problemset/task/1646&quot;&gt;Range Sum Queries I ✔️&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cses.fi/problemset/task/1647&quot;&gt;Range Minimum Queries I ✔️&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cses.fi/problemset/task/1648&quot;&gt;Range Sum Queries II ✔️&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cses.fi/problemset/task/1649&quot;&gt;Range Minimum Queries II ✔️&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cses.fi/problemset/task/1650&quot;&gt;Range Xor Queries ✔️&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cses.fi/problemset/task/1651&quot;&gt;Range Update Queries ✔️&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cses.fi/problemset/task/1652&quot;&gt;Forest Queries ✔️&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cses.fi/problemset/task/1143&quot;&gt;Hotel Queries ✔️&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cses.fi/problemset/task/1749&quot;&gt;List Removals ✔️&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cses.fi/problemset/task/1144&quot;&gt;Salary Queries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cses.fi/problemset/task/1190&quot;&gt;Subarray Sum Queries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cses.fi/problemset/task/1734&quot;&gt;Distinct Values Queries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cses.fi/problemset/task/1739&quot;&gt;Forest Queries II&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cses.fi/problemset/task/1735&quot;&gt;Range Updates and Sums&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cses.fi/problemset/task/1736&quot;&gt;Polynomial Queries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cses.fi/problemset/task/1737&quot;&gt;Range Queries and Copies&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 13 Jul 2020 05:30:00 +0530</pubDate>
        <link>http://localhost:4000/algo/rangeQueries</link>
        <guid isPermaLink="true">http://localhost:4000/algo/rangeQueries</guid>
        
        <category>algo</category>
        
        <category>progress</category>
        
        
        <category>algo</category>
        
      </item>
    
      <item>
        <title>Secura - store passwords securely</title>
        <description>&lt;p&gt;This weekend I decided to study more about hashing and thought of creating my own hashing function, which would obviously, hash. Hashing is different from encryption, with encryption you can decrypt the message into the original form, but hashing should be one way, i.e no matter what the output is, it should be irreversible, which makes the problem even harder. I ended up creating my own hashing algorithm, which I was able to crack myself in around 20 minutes or so. I further studied about how dangerous it can be to roll your own hash (yes &lt;em&gt;roll your hash&lt;/em&gt;) if you are not a cryptographic expert so I decided to give up on creating my own hashing algorithm, however I did dig deep on how hashing is used to store passwords.&lt;/p&gt;

&lt;p&gt;Well, of course, good hashing algorithms exist which are one way (SHA-512, SHA-256, and MD5) however they are crackable. By crackable I mean, although the hash itself is irreversible the hackers calculate the hash of tons(^tons) of common words, and compare it with the existing hash. The process is repeated for every possible word, until they match some passwords. That is exactly why when we choose a password, we are asked to choose a long (7+ digits) with special characters, since the more complicated the password is, the more time it will take to brute force it. Ofcourse, even after all these complications, hackers are still able to crack the passwords. There are many different attacks which the hackers use to crack them such as :  &lt;a href=&quot;https://en.wikipedia.org/wiki/Rainbow_table&quot;&gt;Rainbow Table&lt;/a&gt;, Dictionary, Brute Force attacks which poses a great security threat to the users.&lt;/p&gt;

&lt;p&gt;While creating my node app, I found out that it was difficult for me to choose a hashing algorithm which is secure for storing my passwords, and understanding about cryptography took a lot of time. I believe that it should not be necessary for someone to be a cryptographic expert to hash their passwords securely, hence I created a library : &lt;a href=&quot;https://www.npmjs.com/package/secura&quot;&gt;Secura&lt;/a&gt; which one can use to hash the passwords securely and compare the asynchronous way. This module returns a promise with the hashed password and also compares it.&lt;/p&gt;

&lt;p&gt;Below I have described the usage :&lt;/p&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;

&lt;p&gt;Install the module :&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;secura
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Usage is very simple and straightforward. You can import the module using :&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secura&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;secura&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Generate Password&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This converts the user password to a secure hash.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;secura&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generatePassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;//store the hash in the database&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Verify Password&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This verifies if the password entered by the user matches the hashed password stored in the database.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;secura&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;validatePassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isMatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;//returns true if password matches and false otherwise&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;features&quot;&gt;Features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Simple and straightforward to use. No knowledge of cryptography required to hash passwords and compare.&lt;/li&gt;
  &lt;li&gt;Every hashed password is 61 digits long.&lt;/li&gt;
  &lt;li&gt;Protection from Brute Force &amp;amp; Dictionary Attacks.&lt;/li&gt;
  &lt;li&gt;Protection from &lt;a href=&quot;https://en.wikipedia.org/wiki/Rainbow_table&quot;&gt;Rainbow Table&lt;/a&gt; Attacks.&lt;/li&gt;
  &lt;li&gt;Randomly generated salt for every password.&lt;/li&gt;
  &lt;li&gt;Extra field is not required for storing salt in the database.&lt;/li&gt;
  &lt;li&gt;Uses &lt;a href=&quot;https://en.wikipedia.org/wiki/PBKDF2&quot;&gt;PBKDF2&lt;/a&gt; to compute hash.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can contribute to this library by sending a pull request or opening an issue at : &lt;a href=&quot;https://github.com/vaibhavahuja/secura/&quot;&gt;repo link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading. Hoping you will find this library useful.&lt;/p&gt;
</description>
        <pubDate>Mon, 25 May 2020 05:30:00 +0530</pubDate>
        <link>http://localhost:4000/hash/secura</link>
        <guid isPermaLink="true">http://localhost:4000/hash/secura</guid>
        
        <category>project</category>
        
        <category>javascript</category>
        
        <category>cryptography</category>
        
        
        <category>hash</category>
        
      </item>
    
      <item>
        <title>Educational DP contest</title>
        <description>&lt;p&gt;&lt;strong&gt;PS: This is still WIP.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I will be writing down the solutions (and my approach) of the dynamic programming problems I have solved from the &lt;a href=&quot;https://atcoder.jp/contests/dp&quot;&gt;Atcoder Educational DP Contest&lt;/a&gt;. This post will be used a reference whenever I wish to revise Dynamic Programming.
This contest has 26 problems [A-Z] of varying difficulties. I will be writing the solution for first 12-13 problems and the rest will come in a later post.
I will be writing about the thought I had while identifying the state, what exactly does the DP state signify (meaning of DP &lt;sub&gt;i, j, …&lt;/sub&gt;) and the DP relation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;      &lt;a href=&quot;https://atcoder.jp/contests/dp/tasks/dp_a&quot;&gt;FROG 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PROBLEM LINK:&lt;/strong&gt; https://atcoder.jp/contests/dp/tasks/dp_a&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SOLUTION&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Identifying the states&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can see that in reaching from one stone to another, only the stone number changes and we can get the height of any stone number (an array of heights is given), so there will be only one state that is : &lt;strong&gt;stone number&lt;/strong&gt;
cost of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|h[i] - h[j]|&lt;/code&gt; is incurred when we jump from i&lt;sup&gt;th&lt;/sup&gt; stone to j&lt;sup&gt;th&lt;/sup&gt; stone&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Meaning of DP state&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DP[i]&lt;/code&gt; means the minimum cost incurred for the frog to reach i&lt;sup&gt;th&lt;/sup&gt; stone. So since a frog can reach i&lt;sup&gt;th&lt;/sup&gt; stone only from (i-1)&lt;sup&gt;th&lt;/sup&gt; stone and (i-2)&lt;sup&gt;th&lt;/sup&gt; stone the dp relation will be as follow:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The final answer will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DP[n]&lt;/code&gt; which means the minimum cost incurred to reach n&lt;sup&gt;th&lt;/sup&gt; stone. 
We can also see that since the answer for  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; is only dependent on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(i-1)&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(i-2)&lt;/code&gt; stone we can do it in constant space.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;B&lt;/strong&gt;      &lt;a href=&quot;https://atcoder.jp/contests/dp/tasks/dp_b&quot;&gt;FROG 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PROBLEM LINK:&lt;/strong&gt; https://atcoder.jp/contests/dp/tasks/dp_b&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SOLUTION&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Identifying the states&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This problem is similar to previous one however now the frog can jump from any stonein the range &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[i-1, i-2, i-3,...., i-K]&lt;/code&gt; with the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|h[i]-h[j]|&lt;/code&gt; cost incurred. Again the state will be the &lt;strong&gt;stone number&lt;/strong&gt; since only the stone number matters.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Meaning of DP state&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DP[i]&lt;/code&gt; means the minimum cost incurred for the frog to reach &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; stone. So since a frog can reach &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; stone from any of these stones : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[i-1, i-2, i-3,...., i-K]&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The final answer will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DP[n]&lt;/code&gt; which means the minimum cost incurred to reach &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; stone. The time complexity will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n^2)&lt;/code&gt; and the space complexity will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt;      &lt;a href=&quot;https://atcoder.jp/contests/dp/tasks/dp_c&quot;&gt;VACATION&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PROBLEM LINK:&lt;/strong&gt; https://atcoder.jp/contests/dp/tasks/dp_c&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SOLUTION&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Identifying the states&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Seeing the problem it is clear that the vacation consists of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt; days, and we need to find the maximum total points. Also, Taro has some activities out of which he does one on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; day and does not repeat for two or more consecutive days so the dp states will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;days&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;activity performed&lt;/code&gt; (since every activity has different points). Hence we create a DP array of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Days * activities&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Meaning of DP state&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DP[i][j]&lt;/code&gt; would mean the maximum number of points on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; day given that Taro performs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;j&lt;/code&gt; activity. 
We also need to make sure that Taro does not repeat an activity so the solution will be something like below :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointsofactivity_j_on_i_day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activities&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//we need to make sure that we do not include j as the previous activity. &lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The final answer will be max of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DP[N][j]&lt;/code&gt; where N is total number of days and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;j&lt;/code&gt; are all the activities.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;D&lt;/strong&gt;      &lt;a href=&quot;https://atcoder.jp/contests/dp/tasks/dp_d&quot;&gt;KNAPSACK 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PROBLEM LINK:&lt;/strong&gt; https://atcoder.jp/contests/dp/tasks/dp_d&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SOLUTION&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Identifying the states&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well it is the classical Knapsack and we can see that Taro has to choose some N items and maximum capacity is W. He has to have the maximum value and he only has two choices, either to pick an item and put it in his bag or not to pick the item. So the DP states will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W&lt;/code&gt; since it only matters the number of items Taro picks up and the total weight in the knapsack.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Meaning of DP state&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DP[i][j]&lt;/code&gt; would mean the maximum &lt;strong&gt;value&lt;/strong&gt;* we get after choosing (yes or no) the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; items and maximum weight as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;j&lt;/code&gt;. We get two options, either take an item or not to take the item.
Hence it will be the maximum of:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Taking the item: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val[i] + DP[i-1][j-wt[i]]&lt;/code&gt; (weight empty reduces)&lt;/li&gt;
  &lt;li&gt;Not taking item : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DP[i-1][j]&lt;/code&gt; (weight empty is still the same)&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// (need to make sure that wt[i] &amp;lt;= j)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The final answer will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DP[N][W]&lt;/code&gt; which means the maximum value with all the N items seen and maximum weight as W.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;E&lt;/strong&gt;      &lt;a href=&quot;https://atcoder.jp/contests/dp/tasks/dp_e&quot;&gt;KNAPSACK 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PROBLEM LINK:&lt;/strong&gt; https://atcoder.jp/contests/dp/tasks/dp_e&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SOLUTION&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Identifying the states&lt;/em&gt; 
This problem is just the same as the previous problem with a few changes. The limits have been changed. 
Now,&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 ≤ N ≤ 100
1 ≤ W ≤ 10^9
1 ≤ w[i] ≤ W 
1 ≤ v[i] ≤ 10^3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can see that the value of W we used in the previous problem is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1e9&lt;/code&gt; which is too large for us to make it as a DP state, hence we will change the DP state from W to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;V&lt;/code&gt; where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;V&lt;/code&gt; means the maximum value (which can be just 1e3).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Meaning of DP state&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Since we changed the state the meaning of DP state changes as well. 
Now, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DP[i][j]&lt;/code&gt; is the minimum weight we can use to make maxValue as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;j&lt;/code&gt; and by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; items (again choosing or not choosing is a choice).&lt;/p&gt;

&lt;p&gt;Just like the previous problem, we will either take the item or not take it.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Taking the item: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wt[i] + DP[i-1][j-val[i]]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Not taking item : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DP[i-1][j]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// (need to make sure that val[i] &amp;lt;= j)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// (it is minimum since we want the min weight)&lt;/span&gt;
  	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The final answer will be the maximum &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;j&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DP[N][j]&lt;/code&gt; for which we got the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DP[N][j] &amp;lt; W&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;F&lt;/strong&gt;      &lt;a href=&quot;https://atcoder.jp/contests/dp/tasks/dp_f&quot;&gt;LCS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PROBLEM LINK:&lt;/strong&gt; https://atcoder.jp/contests/dp/tasks/dp_f&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SOLUTION&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Identifying the states&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Finding the longest common subsequence is a very well known problem for dynamic programming. We are given two strings &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t&lt;/code&gt; and we need to find the longest string that is subsequence to both s and t.
Ofcourse, we will have an option to either include &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s[i]&lt;/code&gt; or not and similar case with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t[j]&lt;/code&gt;
Hence the two states will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;j&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Meaning of DP state&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DP[i][j]&lt;/code&gt; would indicate length of longest subsequence with first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; characters of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; and first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;j&lt;/code&gt; characters of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t&lt;/code&gt;. We first construct the DP array which would signify length of longest subsequence and then we trace back to get the actual string.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//tracing back the same we constructed the max array&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  		&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;G&lt;/strong&gt;      &lt;a href=&quot;https://atcoder.jp/contests/dp/tasks/dp_g&quot;&gt;LONGEST PATH&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PROBLEM LINK:&lt;/strong&gt; https://atcoder.jp/contests/dp/tasks/dp_g&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SOLUTION&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Identifying the states&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So we are given a DAG (directed acyclic graph) and we need to find the length of longest directed path in G. Let us understand the problem more with an example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/dp1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that the length of longest directed path is 3 in the above example.&lt;/p&gt;

&lt;p&gt;In a DAG the first thing that comes to the mind is DFS, and this problem can easily be solved with DFS. 
Here the only state is &lt;em&gt;node number&lt;/em&gt; since we only need to calculate that.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Meaning of DP state&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DP[a]&lt;/code&gt; would mean the length of longest directed path which starts at node &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;. We will just use normal DFS but keep on updating the DP array accordingly.
The dfs function will look like this :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allNeighbours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//since we can reach that node through a; &lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//we take the maxi&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;H&lt;/strong&gt;      &lt;a href=&quot;https://atcoder.jp/contests/dp/tasks/dp_h&quot;&gt;GRID 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PROBLEM LINK:&lt;/strong&gt; https://atcoder.jp/contests/dp/tasks/dp_h&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SOLUTION&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Identifying the states&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this problem we need to calculate number of paths in going from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(1, 1)&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(H, W)&lt;/code&gt; and we can only go if the the square is empty (has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt;) and we cannot pass if there is a wall (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt;). Also Taro can go only &lt;strong&gt;Down or Right&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The states will be clearly &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;j&lt;/code&gt; which denote the length and width of a column.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Meaning of DP state&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DP[i][j]&lt;/code&gt; would denote the number of paths from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(1, 1)&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(i, j)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can see in the below image how we are making our dp array. to reach every (i, j) the number of options are (i, j-1) + (i-1, j).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/dp2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//dp[1][i] and dp[i][1] will be 1 as long as dp[1][i-1] and dp[i-1][1] are . (empty spaces). &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blank&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The final answer will be ofcourse &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DP[n][m]&lt;/code&gt; which means the number of ways to reach &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; row and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt; column.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;PS: I am still writing this post and it is work in progress 🚧&lt;/p&gt;

&lt;!-- 
**I**  &amp;nbsp;   [COINS](https://atcoder.jp/contests/dp/tasks/dp_i)


**PROBLEM LINK:** https://atcoder.jp/contests/dp/tasks/dp_i

**SOLUTION**

**Incomplete So Far**

*Identifying the states* 

We are given N coins, which are tossed. The coins are biased tho. The probability of getting heads when coin `i` is tossed is `p[i]` which would mean of getting tails is `1 - p[i]`. Also N is odd so both heads and tails cant come equal number of times. We need to find the probability of having more heads than tails. 
Let us see what really matters in the problem: Since we need to find the proability of getting more heads than tails, the number of heads matter and the probability of getting heads or tails matter, and total number of coin tosses matter but since we can get the `P[head] or P[tails]` we only need two states : number of heads &amp; number of coin tosses. 


*Meaning of DP state*

`DP[i][j]` would mean the probability of getting `j` heads in `i` coin tosses.
We can understand more by trying to make the DP table. --&gt;

&lt;!-- 
&lt;hr/&gt; --&gt;
</description>
        <pubDate>Thu, 07 May 2020 05:30:00 +0530</pubDate>
        <link>http://localhost:4000/codes/atcoder-dp</link>
        <guid isPermaLink="true">http://localhost:4000/codes/atcoder-dp</guid>
        
        <category>dp</category>
        
        <category>codes</category>
        
        <category>wip</category>
        
        <category>algo</category>
        
        
        <category>codes</category>
        
      </item>
    
      <item>
        <title>List of div2C Problems</title>
        <description>&lt;p&gt;Below is a list of problems I will be solving during this February - April’20. It consists of 100 problems, all of which are Div2C, of codeforces. I will try to write the explanation of each problem, based on my understanding, and how I approached the solution. I am starting this on - 13 February 2020.&lt;/p&gt;

&lt;table&gt;
	&lt;tr&gt;
		&lt;th style=&quot;width:10%;&quot;&gt;ID&lt;/th&gt;
		&lt;th style=&quot;width:45%;&quot;&gt;Problem Name&lt;/th&gt;
		&lt;th style=&quot;width:15%; &quot;&gt;Difficulty Level&lt;/th&gt;
		&lt;th style=&quot;width:30%;&quot;&gt;Status&lt;/th&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;1&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/489/C&quot; target=&quot;_blank&quot;&gt;Given Length and Sum of Digits...&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;1&lt;/td&gt;
		&lt;td&gt;Accepted | 13th Feb'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;2&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/466/C&quot; target=&quot;_blank&quot;&gt;Number of Ways&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted | 13th Feb'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;3&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/401/C&quot; target=&quot;_blank&quot;&gt;Team&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted | 13th Feb'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/479/C&quot; target=&quot;_blank&quot;&gt;Exams&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted | 14th Feb'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #FCF4A3;&quot;&gt;
		&lt;td&gt;5&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/455/A&quot; target=&quot;_blank&quot;&gt;Boredom&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt; to do &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;6&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/478/C&quot; target=&quot;_blank&quot;&gt;Table Decorations&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted | 14th Feb'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;7&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/268/C&quot; target=&quot;_blank&quot;&gt;Beautiful Sets of Points&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted | 18th Feb'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #FCF4A3;&quot;&gt;
		&lt;td&gt;8&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/431/C&quot; target=&quot;_blank&quot;&gt;k-Tree&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;to do&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;9&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/441/C&quot; target=&quot;_blank&quot;&gt;Valera and Tubes &lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted | 18th Feb'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;10&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/486/C&quot; target=&quot;_blank&quot;&gt;Palindrome Transformation&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted | 18th Feb'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;11&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/363/C&quot; target=&quot;_blank&quot;&gt;Fixing Typos&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted | 21st Feb'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;12&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/490/C&quot; target=&quot;_blank&quot;&gt;Hacking Cypher&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;2&lt;/td&gt;
		&lt;td&gt;Accepted | 21st Feb'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #FCF4A3;&quot;&gt;
		&lt;td&gt;13&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/463/C&quot; target=&quot;_blank&quot;&gt;Gargari and Bishops&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;5&lt;/td&gt;
		&lt;td&gt;to do&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;14&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/152/C&quot; target=&quot;_blank&quot;&gt;Pocket Book&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted | 21st Feb'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;15&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/109/A&quot; target=&quot;_blank&quot;&gt;Lucky Sum of Digits&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;3&lt;/td&gt;
		&lt;td&gt;Accepted | 21st Feb'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;16&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/382/C&quot; target=&quot;_blank&quot;&gt;Arithmetic Progression&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted | 24th Feb'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;17&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/388/A&quot; target=&quot;_blank&quot;&gt;Fox and Box Accumulation&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;3&lt;/td&gt;
		&lt;td&gt;Accepted | 24th Feb'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;18&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/9/C&quot; target=&quot;_blank&quot;&gt;Hexadecimal's Numbers&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;2&lt;/td&gt;
		&lt;td&gt;Accepted | 24th Feb'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #FCF4A3;&quot;&gt;
		&lt;td&gt;19&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/339/C&quot; target=&quot;_blank&quot;&gt;Xenia and Weights&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;to do&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;20&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/350/C&quot; target=&quot;_blank&quot;&gt;Bombs&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted | 26th Feb'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #FCF4A3;&quot;&gt;
		&lt;td&gt;21&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/459/C&quot; target=&quot;_blank&quot;&gt;Pashmak and Buses&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;5&lt;/td&gt;
		&lt;td&gt;to do&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;22&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/220/A&quot; target=&quot;_blank&quot;&gt;Little Elephant and Problem&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted | 25th Feb'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;23&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/377/A&quot; target=&quot;_blank&quot;&gt;Maze&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted | 4th Mar'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;24&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/217/A&quot; target=&quot;_blank&quot;&gt;Ice Skating&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;3&lt;/td&gt;
		&lt;td&gt;Accepted | 4th Mar'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;25&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/371/C&quot; target=&quot;_blank&quot;&gt;Hamburgers&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted | 5th Mar'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #FCF4A3;&quot;&gt;
		&lt;td&gt;26&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/385/C&quot; target=&quot;_blank&quot;&gt;Bear and Prime Numbers&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;5&lt;/td&gt;
		&lt;td&gt;Getting TLE idk why | 8th Mar'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;27&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/137/C&quot; target=&quot;_blank&quot;&gt;History&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted | 8th Mar'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;28&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/427/C&quot; target=&quot;_blank&quot;&gt;Checkposts&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted | 8th Mar'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;29&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/414/A&quot; target=&quot;_blank&quot;&gt;Mashmokh and Numbers&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;3&lt;/td&gt;
		&lt;td&gt;Accepted | 10th Mar'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #FCF4A3;&quot;&gt;
		&lt;td&gt;30&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/279/C&quot; target=&quot;_blank&quot;&gt;Ladder&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;DP - will do later&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;31&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/264/A&quot; target=&quot;_blank&quot;&gt;Escape from Stones&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;3&lt;/td&gt;
		&lt;td&gt;Accepted | 10th Mar'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;32&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/149/C&quot; target=&quot;_blank&quot;&gt;Division into Teams&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted | 11th Mar'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #FCF4A3;&quot;&gt;
		&lt;td&gt;33&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/225/C&quot; target=&quot;_blank&quot;&gt;Barcode&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;High time, really need to start dp.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;34&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/18/C&quot; target=&quot;_blank&quot;&gt;Stripe&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;3&lt;/td&gt;
		&lt;td&gt;Accepted | 11th Mar'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;35&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/348/A&quot; target=&quot;_blank&quot;&gt;Mafia&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted | 12th Mar'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #FCF4A3;&quot;&gt;
		&lt;td&gt;36&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/283/A&quot; target=&quot;_blank&quot;&gt;Cows and Sequence&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt; getting WA; to do | 12th Mar'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;37&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/231/C&quot; target=&quot;_blank&quot;&gt;To Add or Not to Add&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted | 18th Mar'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #FCF4A3;&quot;&gt;
		&lt;td&gt;38&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/429/A&quot; target=&quot;_blank&quot;&gt;Xor-tree&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;3&lt;/td&gt;
		&lt;td&gt;to do&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;39&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/235/A&quot; target=&quot;_blank&quot;&gt;LCM Challenge&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted | 18th Mar'20&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;40&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/343/A&quot; target=&quot;_blank&quot;&gt;Rational Resistance&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;41&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/251/A&quot; target=&quot;_blank&quot;&gt;Points on Line&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;3&lt;/td&gt;
		&lt;td&gt;Accepted&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #FCF4A3;&quot;&gt;
		&lt;td&gt;42&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/464/A&quot; target=&quot;_blank&quot;&gt;No to Palindromes!&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;to do\&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #FCF4A3;&quot;&gt;
		&lt;td&gt;43&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/424/C&quot; target=&quot;_blank&quot;&gt;To do&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;to do&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;44&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/300/C&quot; target=&quot;_blank&quot;&gt;Beautiful Numbers&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;45&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/337/C&quot; target=&quot;_blank&quot;&gt;Quiz&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;46&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/135/A&quot; target=&quot;_blank&quot;&gt;Replacement&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;3&lt;/td&gt;
		&lt;td&gt;Accepted&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #FCF4A3;&quot;&gt;
		&lt;td&gt;47&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/354/A&quot; target=&quot;_blank&quot;&gt;Vasya and Robot&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;to do&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;48&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/474/C&quot; target=&quot;_blank&quot;&gt;Captain Marmot&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;49&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/150/A&quot; target=&quot;_blank&quot;&gt;Win or Freeze&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #FCF4A3;&quot;&gt;
		&lt;td&gt;50&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/364/A&quot; target=&quot;_blank&quot;&gt;Matrix&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;to do&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;51&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/53/C&quot; target=&quot;_blank&quot;&gt;Little Frog&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;2&lt;/td&gt;
		&lt;td&gt;Accepted&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;52&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/121/A&quot; target=&quot;_blank&quot;&gt;Lucky Sum&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;3&lt;/td&gt;
		&lt;td&gt;Accepted&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;53&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/487/A&quot; target=&quot;_blank&quot;&gt;Fight the Monster&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;54&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/407/A&quot; target=&quot;_blank&quot;&gt;Triangle&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;55&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/257/C&quot; target=&quot;_blank&quot;&gt;View Angle&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;56&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/242/C&quot; target=&quot;_blank&quot;&gt;King's Path&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;57&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/71/C&quot; target=&quot;_blank&quot;&gt;Round Table Knights&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;58&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/329/A&quot; target=&quot;_blank&quot;&gt;Purification&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;59&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/261/A&quot; target=&quot;_blank&quot;&gt;Maxim and Discounts&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;3&lt;/td&gt;
		&lt;td&gt;Accepted&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;60&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/311/A&quot; target=&quot;_blank&quot;&gt;The Closest Pair&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;3&lt;/td&gt;
		&lt;td&gt;Accepted&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;61&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/375/A&quot; target=&quot;_blank&quot;&gt;Divisible by Seven&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;62&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/154/A&quot; target=&quot;_blank&quot;&gt;Hometask&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;63&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/204/A&quot; target=&quot;_blank&quot;&gt;Little Elephant and Interval&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #FCF4A3;&quot;&gt;
		&lt;td&gt;64&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/107/A&quot; target=&quot;_blank&quot;&gt;Dorm Water Supply&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;3&lt;/td&gt;
		&lt;td&gt;to do&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #FCF4A3;&quot;&gt;
		&lt;td&gt;65&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/294/C&quot; target=&quot;_blank&quot;&gt;Shaass and Lights&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;5&lt;/td&gt;
		&lt;td&gt;to do&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;66&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/359/C&quot; target=&quot;_blank&quot;&gt;Prime Number&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;5&lt;/td&gt;
		&lt;td&gt;Accepted&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #FCF4A3;&quot;&gt;
		&lt;td&gt;67&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/243/A&quot; target=&quot;_blank&quot;&gt;The Brand New Function&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;to do&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;68&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/198/A&quot; target=&quot;_blank&quot;&gt;About Bacteria&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #FCF4A3;&quot;&gt;
		&lt;td&gt;69&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/319/A&quot; target=&quot;_blank&quot;&gt;Malek Dance Club&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;to do&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #FCF4A3;&quot;&gt;
		&lt;td&gt;70&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/358/C&quot; target=&quot;_blank&quot;&gt;Dima and Containers&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;5&lt;/td&gt;
		&lt;td&gt;to do :/&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: #d5e9dd;&quot;&gt;
		&lt;td&gt;71&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/87/A&quot; target=&quot;_blank&quot;&gt;Trains&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;Accepted&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;72&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/255/C&quot; target=&quot;_blank&quot;&gt;Almost Arithmetical Progression&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;73&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/91/A&quot; target=&quot;_blank&quot;&gt;Newspaper Headline&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;74&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/374/C&quot; target=&quot;_blank&quot;&gt;Inna and Dima&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;75&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/216/C&quot; target=&quot;_blank&quot;&gt;Hiring Staff&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;5&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;76&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/190/C&quot; target=&quot;_blank&quot;&gt;STL&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;77&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/123/A&quot; target=&quot;_blank&quot;&gt;Prime Permutation&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;78&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/14/C&quot; target=&quot;_blank&quot;&gt;Four Segments&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;5&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;79&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/35/C&quot; target=&quot;_blank&quot;&gt;Fire Again&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;80&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/266/C&quot; target=&quot;_blank&quot;&gt;Below the Diagonal&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;6&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;81&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/29/C&quot; target=&quot;_blank&quot;&gt;Mail Stamps&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;82&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/113/A&quot; target=&quot;_blank&quot;&gt;Grammar Lessons&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;83&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/223/A&quot; target=&quot;_blank&quot;&gt;Bracket Sequence&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;84&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/77/A&quot; target=&quot;_blank&quot;&gt;Heroes&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;85&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/138/A&quot; target=&quot;_blank&quot;&gt;Literature Lesson&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;86&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/222/C&quot; target=&quot;_blank&quot;&gt;Reducing Fractions&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;5&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;87&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/213/A&quot; target=&quot;_blank&quot;&gt;Game&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;88&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/193/A&quot; target=&quot;_blank&quot;&gt;Cutting Figure&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;89&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/58/C&quot; target=&quot;_blank&quot;&gt;Trees&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;90&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/95/A&quot; target=&quot;_blank&quot;&gt;Hockey&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;91&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/31/C&quot; target=&quot;_blank&quot;&gt;Schedule&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;92&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/280/A&quot; target=&quot;_blank&quot;&gt;Rectangle Puzzle&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;5&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;93&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/49/C&quot; target=&quot;_blank&quot;&gt;Disposition&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;94&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/32/C&quot; target=&quot;_blank&quot;&gt;Flea&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;95&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/98/A&quot; target=&quot;_blank&quot;&gt;Help Victoria the Wise&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;96&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/56/C&quot; target=&quot;_blank&quot;&gt;Corporation Mail&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;97&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/182/C&quot; target=&quot;_blank&quot;&gt;Optimal Sum&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;5&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;98&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/396/A&quot; target=&quot;_blank&quot;&gt;On Number of Decompositions into Multipliers&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;7&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;99&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/392/A&quot; target=&quot;_blank&quot;&gt;Blocked Points&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;7&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr style=&quot;background-color: white;&quot;&gt;
		&lt;td&gt;100&lt;/td&gt;
		&lt;td&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/47/C&quot; target=&quot;_blank&quot;&gt;Crossword&lt;/a&gt;&lt;/td&gt;
		&lt;td&gt;5&lt;/td&gt;
		&lt;td&gt;NA&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
</description>
        <pubDate>Thu, 13 Feb 2020 05:30:00 +0530</pubDate>
        <link>http://localhost:4000/codes/practice-list-1</link>
        <guid isPermaLink="true">http://localhost:4000/codes/practice-list-1</guid>
        
        <category>div2C</category>
        
        <category>codes</category>
        
        
        <category>codes</category>
        
      </item>
    
      <item>
        <title>Cryptocurrency explained</title>
        <description>&lt;!-- # cryptocurrency explained.  --&gt;

&lt;p&gt;Over the past few days I have been going through various blogs, research papers, youtube videos, books to read and gain knowledge about Cryptocurrency, which has been a pretty talked about topic recently. Unless you have been living under a rock, it is highly unlikely that you have never heard of &lt;em&gt;(bitcoin, blockchain, ethereum, mining)&lt;/em&gt; before. Through this post, I will try to explain how these technologies/currencies work and why were they created, and how can they change the way we do transactions now.&lt;/p&gt;

&lt;p&gt;To understand this Digital Currency, let us understand, how currency works and has been working so far. 
Initially, we had &lt;a href=&quot;https://en.wikipedia.org/wiki/Barter&quot;&gt;barter&lt;/a&gt; system, which was replaced by money mainly because exchange is not always convenient and efficient. 
Due to this, currency started to mint. The exchange problems were solved and this system was largely based on trust. The kings used to have their &lt;a href=&quot;https://en.wikipedia.org/wiki/Alyattes_of_Lydia&quot;&gt;royal seal&lt;/a&gt; on the coin signifying that this currency is valid. However forgery was very common as making a coin and copying the seal was not that a difficult task, but still way much better than Barter. 
With time, the gold coins transformed into paper money, which was widely circulated across the world by &lt;a href=&quot;https://en.wikisource.org/wiki/The_Travels_of_Marco_Polo/Book_2/Chapter_24&quot;&gt;explorers&lt;/a&gt;. Trade flourished across countries through this paper money, and exchange of currency started around that time too, and by around 1860, Western Union, spearheaded e-money with electronic func transfer via telegram. With time cards came, and with the rise of internet the e-money started to boom. 
The reason, why I am focussing on the history of currency, is because I want you to understand what is common between all these systems of currency. From exchanging coins with royal seals, to exchanging paper currency, with issuance from bank/government, to starting e-money (banks giving cards). If you try to find the pattern, you will see that all of these currencies are &lt;strong&gt;Centralized&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;By centralized, what I mean is that everytime there is an authority that is responsible for issuing the currency. Someone who says that, Yes, I am accountable for this currency and this currency is valid. Be it a king, who imprints the coin with its royal seal, or the government. The transactions have always been based on &lt;strong&gt;Trust&lt;/strong&gt;. If I pay ₹100 to X, the bank issuing the currency is responsible to pay that ₹100 to X. Hence the currency so far being used is based on Trust, and is Centralized. Due to this we are always bound to law, cannot be innovative and creative with our money, always under control and at a risk of interference. Also, the banks would charge some amount for transactions as &lt;em&gt;transaction fee&lt;/em&gt;. The point to be noted is that, crypto currency is not flawless, so it just provides as an alternative currency as of now. Due to all this, a currency was needed which was not based on trust, and is not centralized.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cryptocurrency is a decentralized trustless verification system + Math.&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, one thing I would like to mention here is that just like normal currency, you need not know how cryptocurrency is made or how it works to use it. Diving into the technical details, let us understand everything with an example.&lt;/p&gt;

&lt;p&gt;Say there are 4 friends A, B, C and D who hang out pretty often, and hence they need a system to keep track of money. What they do is, they keep a ledger and add all the transactions in it. At the end of the month they take all the transactions and then total it up and settle it and pay accordingly.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* ledger *
A gives B 200 rupees
B gives C 500 rupees
C gives A 1000 rupees
D gives B 300 rupees
..............and so on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The catch here is that the ledger is accessible to all four of them, i.e anyone can add or delete the transactions. D might just add that, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C gives D 500 rupees&lt;/code&gt;, as there is no one stopping D. He can keep on adding fraudulent transactions until someone catches him, and resolve this. So, what we need is a system to verify that the correct person is writing the ledger. The solution to this is &lt;em&gt;Digital Signatures&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Before I start with explaining what Digital Signatures are, I would like to mention Cryptographic Hashing. Hashing is a method that converts any form of data in a unique string of text. Typically the output of every hash function is a fixed length of string. Now what cryptographic hash functions are, are hash functions which cannot be reversed. 
So cryptographic hash functions will take any input, no matter how big or small, and output a fixed length of string which is irreversible. It is practically impossible to determine what input caused that hash except hit and trial. Now coming to digital signatures, these are used to verify the identity of the person signing a message. Through digital signatures we can be sure that the person signing the message is actually the person writing the message. It mainly consists of &lt;em&gt;private key and public key.&lt;/em&gt; Private key can be thought of your PIN card and public key as your A/C number. You keep the private key with yourself, but can give everyone your public key. Now to make a transaction, you write a message and encrypt that with your private key. And you send the hash message to the receiver. The receiver would see the hashed message, and verify if it was sent by you using the public key. The cryptographic hash function used is mainly SHA-256. The bit string generated is 256 digits long, i.e there can be 2&lt;sup&gt;256&lt;/sup&gt; combinations. 2 &lt;sup&gt;256&lt;/sup&gt; is an extremely large large number.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bitcoin2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The functions would look something like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dig_sign(message, private key) -&amp;gt; signature

verify(message, signature, public key) -&amp;gt; true/false

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that you have a fair idea of how digital signatures work, we can go back to the example. D can no longer write any fraudulent transactions in the ledger as they all will be from now on digitally signed. The verification system apart from checking if the message was signed from the trusted party or not, it also checks if the party sending the money actually has it or not.&lt;/p&gt;

&lt;p&gt;The problem with this solution is that the fate of the entire money system depends on the company running the mint, with every transaction having to go through them, just like a bank. We need a way for the payee to know that the previous owners did not sign any earlier transactions.&lt;/p&gt;

&lt;p&gt;One thing which you might have noticed, is that this system of ledger that I just explained is centralized as well, which I had focussed on earlier. We have found a way to secure the transactions but there is only one ledger, and everyone is making transactions in their own ledger. As I had mentioned earlier, the cryptocurrency is decentralized. To make this currency decentralized, we will give one copy of the ledger to all four friends (A B C and D). Now this ledger becomes a decentralized currency.&lt;/p&gt;

&lt;p&gt;So now, all have personal copies of the ledger, and now adding the transaction has become a different process. Like they can still add the transaction in their personal ledger, but it wont match with the ledger of someone else. Say, B adds &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B gave ₹5000 to C&lt;/code&gt; to his ledger, but that information wont be added on the ledger of A or C or D. To have all the ledgers on the same track, one must broadcast their ledger so that everyone in the network updates their ledgers with the most recent transactions. So, B would update its ledger, and then broadcast his ledger so that everyone verifies the transaction and update their ledgers as well. Hence through this example, we have made a trustless decentralized verification system.&lt;/p&gt;

&lt;p&gt;A big problem with this system is that, what if D broadcasts that he has sent 500 rupees to A, and at the same time, it broadcasts that he has sent 500 rupees to B. This is how D can double spend his money. This problem has been address in the original &lt;a href=&quot;https://bitcoin.org/bitcoin.pdf&quot;&gt;Bitcoin Paper&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The bitcoin paper mainly said to trust the block/ledger with the most computational work being done &lt;em&gt;(proof of work)&lt;/em&gt;. This ledger is mainly the blockchain. The below diagram will help you understand the chain structure of the ledger.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bitcoin1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The proof of work involves scanning for a value that when hashed, such as with SHA-256 the hash begins with a number of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n zero bits&lt;/code&gt;. 
For our network, we implement the proof of work by incrementing a nonce in the block until a value is found that gives the blocks hash the required zero bits. Finding this number is called &lt;em&gt;mining&lt;/em&gt;, and the people who do this are called &lt;em&gt;miners&lt;/em&gt;. The paper also said to trust that chain with the most number of nodes, hence while updating their ledger, they also keep track of all other chains, and then eliminate the smaller chains as miners start working on the longest chain. 
Proof-of-work is essentially one-CPU-one-vote. The majority decision is represented by the longest chain, which has the greatest proof-of-work effort invested in it. If a majority of CPU power is controlled by honest nodes, the honest chain will grow the fastest and outpace any competing chains. To modify a past block, an attacker would have to redo the proof-of-work of the block and all blocks after it and then catch up with and surpass the work of the honest nodes the number of zeros vary a lot. What the miner gets in return is a block reward. With every block added to the network, the total amount of money increases in the economy, as there is no one issuing the block reward. Hence through this proof of work, it is nearly impossible to create fraudulent transactions. This miniature lottery is such that there is one winner every 10 minutes (in case of  bitcoin). This time may change for other cryptocurrencies.&lt;/p&gt;

&lt;p&gt;We can understand the whole network through these steps&lt;/p&gt;

&lt;p&gt;The steps to run the network are as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;New transactions are broadcast to all nodes.&lt;/li&gt;
  &lt;li&gt;Each node collects new transactions into a block.&lt;/li&gt;
  &lt;li&gt;Each node works on finding a difficult proof-of-work for its block.&lt;/li&gt;
  &lt;li&gt;When a node finds a proof-of-work, it broadcasts the block to all nodes.&lt;/li&gt;
  &lt;li&gt;Nodes accept the block only if all transactions in it are valid and not already spent.&lt;/li&gt;
  &lt;li&gt;Nodes express their acceptance of the block by working on creating the next block in the chain, using the hash of the accepted block as the previous hash. Nodes always consider the longest chain to be the correct one and will keep working on extending it. If two nodes broadcast different versions of the next block simultaneously, some nodes may receive one or the other first. In that case, they work on the first one they received, but save the other branch in case it becomes longer. The tie will be broken when the next proof of work is found and one branch becomes longer; the nodes that were working on the other branch will then switch to the longer one.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Through this post, I hope you have a fair idea of how cryptocurrencies work.&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Oct 2019 18:01:19 +0530</pubDate>
        <link>http://localhost:4000/blockchain/understanding-bitcoin</link>
        <guid isPermaLink="true">http://localhost:4000/blockchain/understanding-bitcoin</guid>
        
        <category>Blockchain</category>
        
        
        <category>blockchain</category>
        
      </item>
    
  </channel>
</rss>
